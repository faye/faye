.content
  :textile
    h3. Ruby server
    
    h4. Setting up
    
    All Faye clients need a central messaging server to communicate with; the
    server records which clients are subscribed to which channels and handles
    routing of messages between clients. Setting up a server in Ruby is simple:
    
    <pre class="prettyprint">require 'faye'
    
    bayeux = Faye::RackAdapter.new(:mount => '/faye', :timeout => 25)
    bayeux.listen(9292)</pre>
    
    @bayeux.listen@ will block if EventMachine is not already running. The
    @RackAdapter@ class supports these options during setup:
    
    * @:mount@: the path on the host at which the Faye service is available. In
      this example, clients would connect to @http://localhost:9292/faye@ to
      talk to the server.
    * @:timeout@: the maximum time to hold a connection open before returning
      the response. This is given in seconds and must be smaller than the
      timeout on your frontend webserver. Faye uses Thin as its webserver, whose
      default timeout is 30 seconds.
    * @:extensions@: (optional) a list of extensions to add to the server,
      useful when using @RackAdapter@ as middleware.
    * @:engine@: (optional) the type and parameters for the engine you want to
      use - see 'Engines' below.
    
    The @listen()@ method can take options that specify the key and certificate
    files to use, which if given make the server respond to SSL traffic.
    
    <pre class="prettyprint">bayeux.listen(443,
      :key  => 'path/to/ssl.key',
      :cert => 'path/to/ssl.cert'
    )</pre>
    
    Faye can also be setup as Rack middleware, for example in front of a Sinatra
    application:
    
    <pre class="prettyprint"># config.ru
    require 'faye'
    require File.dirname(__FILE__) + '/app'
    
    use Faye::RackAdapter, :mount      => '/faye',
                           :timeout    => 25,
                           :extensions => [MyExtension.new]
    
    run Sinatra::Application</pre>
    
    h4. Notes
    
    A note about the mount point: mounting the server at @/faye@ will make the
    Faye server respond to any request whose path begins @/faye@; this is so
    that it can interoperate with clients that use different request paths for
    different channels.
    
    Being an event-driven application, Faye only works with event-driven servers.
    It currently only supports Thin, and makes some extensions to Thin in order
    to support WebSockets. If you use @rackup@ you'll need to specify Thin as
    the web server, and set the environment to @production@ so that Rack does
    not load the development middlewares that are not compatible with Thin's
    async protocol.
    
    <pre class="prettyprint">rackup config.ru -s thin -E production</pre>
    
    h4. Engines
    
    Faye supports pluggable back-end engines that help the service adapt to
    different use cases. The engines currently available are:
    
    * @memory@: (default) all service state is stored in the Faye server process.
      Only one instance of the server may be run but internal operations are
      very fast.
    * @redis@: (experimental) service state and message distribution is handled
      by a Redis database server. Operations are slower but multiple instances
      of the Faye server may be run on top of a single Redis database.
    
    To use the Redis engine, pass the @:engine@ option when initializing the
    Faye server:
    
    <pre class="prettyprint">bayeux = Faye::RackAdapter.new(
      :mount   => '/faye',
      :timeout => 25,
      :engine  => {
        :type       => 'redis',
        :host       => 'REDIS_HOST',
        :port       => 'REDIS_PORT',
        :password   => 'REDIS_AUTH',  # if your server requires it
        :database   => 0,             # optional, selects database
        :namespace  => '/foo'         # optional, namespaces keys
      })</pre>
    
    h4. Server-side Ruby clients
    
    You can use Faye clients on the server side to send messages to in-browser
    clients or to other server-side processes. The API is identical to the
    "browser client":/browser.html.
    
    To create a client, just supply the host you want to connect to:
    
    <pre class="prettyprint">client = Faye::Client.new('http://localhost:9292/faye')</pre>
    
    You can then use @client.subscribe()@ and @client.publish()@ to send
    messages to other clients; the API is similar to the "browser client":/browser.html
    only you need to run the client inside EventMachine:
    
    <pre class="prettyprint">require 'eventmachine'
    
    EM.run {
      client.subscribe('/foo') do |message|
        puts message.inspect
      end
      
      client.publish('/foo', 'text' => 'Hello world')
    }</pre>
    
    The server has its own client attached to it so you can use the server to
    send messages to browsers. This client has direct access to the server
    without going over HTTP, and is thus more efficient. To send messages
    through the server just use the @#get_client@ method.
    
    <pre class="prettyprint">bayeux.get_client.publish('/email/new', {
      'text'      => 'New email has arrived!',
      'inboxSize' => 34
    })</pre>
    
    h4. Extensions
    
    Both the server and client support an extension mechanism that lets you
    intercept messages as they pass in and out. This lets you modify messages
    for any purpose you like, including messages on @/meta/*@ channels that are
    used by the protocol. An extension is just an object that has either an
    @incoming()@ or @outgoing()@ method (or both). These methods should accept a
    message and a callback function, and should call the function with the
    message once they have made any modifications.
    
    Extensions use a callback instead of simply returning the modified message
    since this allows you to use asynchronous logic to make your modifications.
    
    As an example, suppose we want to authenticate subscription messages by
    checking an authentication token against a list we're keeping in a file on
    disk. Clients subscribe to channels by sending a message to the
    @/meta/subscribe@ channel with the channel they want to subscribe in the
    @subscription@ field. Let's say our authentication file contains a JSON
    object that maps channels to required tokens:
    
    <pre class="prettyprint">// tokens.json
    
    {
      "/users/jcoglan/updates": "rt6utrb",
      "/artists/mclusky/news":  "99taaec"
    }</pre>
    
    The server can validate subscription messages by checking that they have the
    right auth token attached. By convention, data added by extensions is stored
    in the message's @ext@ field.
    
    <pre class="prettyprint">class ServerAuth
      def incoming(message, callback)
        # Let non-subscribe messages through
        unless message['channel'] == '/meta/subscribe'
          return callback.call(message)
        end
        
        # Get subscribed channel and auth token
        subscription = message['subscription']
        msg_token    = message['ext'] && message['ext']['authToken']
        
        # Find the right token for the channel
        registry = JSON.parse(File.read('./tokens.json'))
        token    = registry[subscription]
        
        # Add an error if the tokens don't match
        if token != msg_token
          message['error'] = 'Invalid subscription auth token'
        end
        
        # Call the server back now we're done
        callback.call(message)
      end
    end
    
    bayeux.add_extension(ServerAuth.new)</pre>
    
    If you add an @error@ property to a message, the server will not process the
    message further and will simply return it to the sender, effectively
    blocking the subscription attempt. You should always make sure your
    extension calls the @callback@, as failing to do so could block delivery of
    other messages in the same request.
    
    On the client side, you'll need to make sure the client sends the right auth
    token to satisfy the server. We do this by adding an _outgoing_ extension on
    the client side.
    
    <pre class="prettyprint">class ClientAuth
      def outgoing(message, callback)
        # Again, leave non-subscribe messages alone
        unless message['channel'] == '/meta/subscribe'
          return callback.call(message)
        end
        
        # Add ext field if it's not present
        message['ext'] ||= {}
        
        # Set the auth token
        message['ext']['authToken'] = 'rt6utrb'
        
        # Carry on and send the message to the server
        callback.call(message)
      end
    end
    
    client.add_extension(ClientAuth.new)</pre>
    
    If an extension has an @added()@ method, that will be called when the
    extension is added to its host. To remove an extension, call:
    
    <pre class="prettyprint"># Calls extension.removed() if defined
    host_object.remove_extension(extension)</pre>
    
    To write extensions you'll need to know what kinds of messages are used by
    the Bayeux protocol; see "the specification":http://svn.cometd.com/trunk/bayeux/bayeux.html
    for more details.

